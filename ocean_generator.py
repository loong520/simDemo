"""
Ocean脚本生成器模块
用于根据配置生成各种类型的Ocean脚本
"""

import os
from pathlib import Path
from typing import Dict, List, Any, Optional
from jinja2 import Template
from config import SimulationConfig


class OceanScriptGenerator:
    """Ocean脚本生成器"""
    
    def __init__(self, config: SimulationConfig):
        """
        初始化Ocean脚本生成器
        
        Args:
            config: 仿真配置对象
        """
        self.config = config
        self.script_content = []
        
        # Ocean脚本模板
        self.templates = self._init_templates()
    
    def _init_templates(self) -> Dict[str, str]:
        """初始化Ocean脚本模板"""
        return {
            'header': '''
; ==================================================
; Auto-generated Ocean Script
; Project: {{ project_name }}
; Generated by: Chip Simulation Demo
; ==================================================
''',
            
            'simulator': '''
; 设置仿真器
simulator( '{{ simulator }} )
''',
            
            'design': '''
; 设置设计
design( "{{ design_path }}" )
''',
            
            'results_dir': '''
; 设置结果目录
resultsDir( "{{ results_dir }}" )
''',
            
            'model_file': '''
; 加载模型文件
{% for model in model_files %}
modelFile( 
{% if model|length >= 2 %}
    list("{{ model[0] }}" "{{ model[1] }}")
{% else %}
    list("{{ model[0] }}" "")
{% endif %}
)
{% endfor %}
''',
            
            'stimulus': '''
; 加载激励文件
{% for stim_file in stimulus_files %}
loadi( "{{ stim_file }}" )
{% endfor %}
''',
            
            'design_variables': '''
; 设置设计变量
{% for var_name, var_value in design_variables.items() %}
desVar( "{{ var_name }}" {{ var_value }} )
{% endfor %}
''',
            
            'analysis_dc': '''
; DC分析配置
analysis('dc ?saveOppoint t 
{% for param, value in analysis_params.items() %}
         ?{{ param }} {{ value }}
{% endfor %}
)
''',
            
            'analysis_ac': '''
; AC分析配置
analysis('ac 
{% for param, value in analysis_params.items() %}
         ?{{ param }} {{ value }}
{% endfor %}
)
''',
            
            'analysis_tran': '''
; 瞬态分析配置
analysis('tran 
{% for param, value in analysis_params.items() %}
         ?{{ param }} {{ value }}
{% endfor %}
)
''',
            
            'analysis_noise': '''
; 噪声分析配置
analysis('noise 
{% for param, value in analysis_params.items() %}
         ?{{ param }} {{ value }}
{% endfor %}
)
''',
            
            'save_nodes': '''
; 保存节点配置
{% for node in save_nodes %}
save( '{{ node }} )
{% endfor %}
''',
            
            'initial_conditions': '''
; 初始条件设置
{% for node, value in initial_conditions.items() %}
ic( "{{ node }}" {{ value }} )
{% endfor %}
''',
            
            'environment': '''
; 环境配置
temp( {{ temperature }} )
''',
            
            'run': '''
; 运行仿真
run()
''',
            
            'post_processing': '''
; 后处理脚本
selectResult( '{{ analysis_type }} )

{% if plot_enabled %}
; 绘图配置
{% for plot in plots %}
plot( {{ plot.data }} ?xlabel "{{ plot.xlabel }}" ?ylabel "{{ plot.ylabel }}" )
{% endfor %}
{% endif %}

{% if save_data %}
; 保存数据
{% for save_item in save_items %}
saveWaveform( "{{ save_item.file }}" {{ save_item.data }} )
{% endfor %}
{% endif %}
'''
        }
    
    def generate_script(self) -> str:
        """
        生成完整的Ocean脚本
        
        Returns:
            生成的Ocean脚本内容
        """
        self.script_content = []
        
        # 1. 添加头部注释
        self._add_header()
        
        # 2. 设置仿真器
        self._add_simulator()
        
        # 3. 设置设计路径
        self._add_design()
        
        # 4. 设置结果目录
        self._add_results_dir()
        
        # 5. 加载模型文件
        self._add_model_files()
        
        # 6. 加载激励文件
        self._add_stimulus_files()
        
        # 7. 设置设计变量
        self._add_design_variables()
        
        # 8. 配置分析类型
        self._add_analyses()
        
        # 9. 保存节点配置
        self._add_save_nodes()
        
        # 10. 初始条件设置
        self._add_initial_conditions()
        
        # 11. 环境配置
        self._add_environment()
        
        # 12. 运行仿真
        self._add_run()
        
        # 13. 后处理
        self._add_post_processing()
        
        return '\n'.join(self.script_content)
    
    def _add_header(self):
        """添加头部注释"""
        template = Template(self.templates['header'])
        content = template.render(project_name=self.config.project_name)
        self.script_content.append(content)
    
    def _add_simulator(self):
        """添加仿真器配置"""
        template = Template(self.templates['simulator'])
        content = template.render(simulator=self.config.simulator)
        self.script_content.append(content)
    
    def _add_design(self):
        """添加设计路径配置"""
        template = Template(self.templates['design'])
        content = template.render(design_path=self.config.design_path)
        self.script_content.append(content)
    
    def _add_results_dir(self):
        """添加结果目录配置"""
        # 确保结果目录存在
        results_path = Path(self.config.results_dir)
        results_path.mkdir(parents=True, exist_ok=True)
        
        template = Template(self.templates['results_dir'])
        content = template.render(results_dir=self.config.results_dir)
        self.script_content.append(content)
    
    def _add_model_files(self):
        """添加模型文件配置"""
        if self.config.model_files:
            template = Template(self.templates['model_file'])
            content = template.render(model_files=self.config.model_files)
            self.script_content.append(content)
    
    def _add_stimulus_files(self):
        """添加激励文件配置"""
        if self.config.stimulus_files:
            template = Template(self.templates['stimulus'])
            content = template.render(stimulus_files=self.config.stimulus_files)
            self.script_content.append(content)
    
    def _add_design_variables(self):
        """添加设计变量配置"""
        if self.config.design_variables:
            template = Template(self.templates['design_variables'])
            content = template.render(design_variables=self.config.design_variables)
            self.script_content.append(content)
    
    def _add_analyses(self):
        """添加分析配置"""
        for analysis_type, analysis_params in self.config.analyses.items():
            if analysis_type in self.templates:
                template = Template(self.templates[f'analysis_{analysis_type}'])
                content = template.render(analysis_params=analysis_params)
                self.script_content.append(content)
            else:
                # 通用分析模板
                self._add_generic_analysis(analysis_type, analysis_params)
    
    def _add_generic_analysis(self, analysis_type: str, params: Dict[str, Any]):
        """添加通用分析配置"""
        analysis_content = f"; {analysis_type.upper()} analysis configuration\n"
        analysis_content += f"analysis('{analysis_type}\n"
        
        for param, value in params.items():
            if isinstance(value, str):
                analysis_content += f'         ?{param} "{value}"\n'
            else:
                analysis_content += f'         ?{param} {value}\n'
        
        analysis_content += ")\n"
        self.script_content.append(analysis_content)
    
    def _add_save_nodes(self):
        """添加保存节点配置"""
        if self.config.save_nodes:
            template = Template(self.templates['save_nodes'])
            content = template.render(save_nodes=self.config.save_nodes)
            self.script_content.append(content)
    
    def _add_initial_conditions(self):
        """添加初始条件设置"""
        if self.config.initial_conditions:
            template = Template(self.templates['initial_conditions'])
            content = template.render(initial_conditions=self.config.initial_conditions)
            self.script_content.append(content)
    
    def _add_environment(self):
        """添加环境配置"""
        template = Template(self.templates['environment'])
        content = template.render(temperature=self.config.temperature)
        self.script_content.append(content)
    
    def _add_run(self):
        """添加运行命令"""
        template = Template(self.templates['run'])
        content = template.render()
        self.script_content.append(content)
    
    def _add_post_processing(self):
        """添加后处理配置"""
        if self.config.post_processing:
            post_config = self.config.post_processing
            
            # 获取主要分析类型用于selectResult
            main_analysis = list(self.config.analyses.keys())[0] if self.config.analyses else 'tran'
            
            template = Template(self.templates['post_processing'])
            content = template.render(
                analysis_type=main_analysis,
                plot_enabled=post_config.get('plot_enabled', False),
                plots=post_config.get('plots', []),
                save_data=post_config.get('save_data', False),
                save_items=post_config.get('save_items', [])
            )
            self.script_content.append(content)
    
    def save_script(self, output_file: str) -> str:
        """
        保存Ocean脚本到文件
        
        Args:
            output_file: 输出文件路径
            
        Returns:
            实际保存的文件路径
        """
        script_content = self.generate_script()
        
        output_path = Path(output_file)
        output_path.parent.mkdir(parents=True, exist_ok=True)
        
        with open(output_path, 'w', encoding='utf-8') as f:
            f.write(script_content)
        
        return str(output_path.absolute())
    
    def generate_python_skillbridge_script(self) -> str:
        """
        生成基于skillbridge的Python脚本
        
        Returns:
            Python脚本内容
        """
        python_template = '''
"""
Auto-generated Python script using skillbridge
Project: {{ project_name }}
"""

from skillbridge import Workspace
from skillbridge.client.translator import Symbol
from skillbridge.client.functions import Function
import numpy as np
import matplotlib.pyplot as plt
from pathlib import Path

def define_ocean_functions(ws):
    """注册Ocean函数"""
    ocean_functions = [
        'simulator', 'design', 'resultsDir', 'modelFile', 'analysis',
        'desVar', 'envOption', 'save', 'ic', 'temp', 'run', 'selectResult',
        'loadi'
    ]
    
    for func_name in ocean_functions:
        ws.user += Function(func_name, f'ocean {func_name}()', set())

def waveform_to_vector(ws, waveforms):
    """将波形数据转换为Python向量"""
    vectors = []
    
    for wave in waveforms:
        y_wave = ws.dr.get_waveform_y_vec(wave)
        y_vec = []
        for i in range(ws.dr.vector_length(y_wave)):
            y_vec.append(ws.dr.get_elem(y_wave, i))
        vectors.append(y_vec)
    
    # x向量对所有y向量都相同
    if waveforms:
        x_wave = ws.dr.get_waveform_x_vec(waveforms[0])
        x_vec = []
        for i in range(ws.dr.vector_length(x_wave)):
            x_vec.append(ws.dr.get_elem(x_wave, i))
        return vectors, x_vec
    
    return vectors, []

def main():
    """主函数"""
    try:
        # 连接到Virtuoso服务器
        print("Connecting to Virtuoso server...")
        ws = Workspace.open()
        
        # 注册Ocean函数
        define_ocean_functions(ws)
        
        # 设置仿真器
        print("Configuring simulator...")
        ws.user.simulator(Symbol('{{ simulator }}'))
        
        # 设置设计
        ws.user.design('{{ design_path }}')
        
        # 设置结果目录
        results_dir = Path('{{ results_dir }}')
        results_dir.mkdir(parents=True, exist_ok=True)
        ws.user.results_dir('{{ results_dir }}')
        
        # 加载模型文件
        {% for model in model_files %}
        {% if model|length >= 2 %}
        ws.user.model_file([
            ["{{ model[0] }}", "{{ model[1] }}"]
        ])
        {% else %}
        ws.user.model_file([
            ["{{ model[0] }}", ""]
        ])
        {% endif %}
        {% endfor %}
        
        # 加载激励文件
        {% for stim_file in stimulus_files %}
        ws.user.loadi('{{ stim_file }}')
        {% endfor %}
        
        # 设置设计变量
        {% for var_name, var_value in design_variables.items() %}
        ws.user.des_var('{{ var_name }}', {{ var_value }})
        {% endfor %}
        
        # 配置分析
        {% for analysis_type, analysis_params in analyses.items() %}
        print("Configuring {{ analysis_type }} analysis...")
        analysis_args = {}
        {% for param, value in analysis_params.items() %}
        analysis_args['{{ param }}'] = '{{ value }}'
        {% endfor %}
        
        # 构建分析命令
        ws.user.analysis(Symbol('{{ analysis_type }}'), **{f'?{k}': v for k, v in analysis_args.items()})
        {% endfor %}
        
        # 配置保存节点
        {% for node in save_nodes %}
        ws.user.save(Symbol('v'), '{{ node }}')
        {% endfor %}
        
        # 设置初始条件
        {% for node, value in initial_conditions.items() %}
        ws.user.ic('{{ node }}', {{ value }})
        {% endfor %}
        
        # 设置温度
        ws.user.temp({{ temperature }})
        
        # 运行仿真
        print("Starting simulation...")
        ws.user.run()
        
        # 选择结果
        main_analysis = '{{ main_analysis }}'
        try:
            ws.user.select_result(Symbol(main_analysis))
        except:
            print('selectResult encountered stdobj type data, ignoring...')
        
        # 提取和处理数据
        print("Extracting simulation data...")
        waveforms = []
        {% for node in save_nodes %}
        try:
            wave_data = ws.get.data('{{ node }}')
            waveforms.append(wave_data)
        except:
            print('Cannot extract data for node {{ node }}')
        {% endfor %}
        
        if waveforms:
            # 转换为Python向量
            vectors, time_vec = waveform_to_vector(ws, waveforms)
            
            # 绘图
            plt.figure(figsize=(12, 8))
            for i, (vec, node) in enumerate(zip(vectors, {{ save_nodes }})):
                plt.subplot(len(vectors), 1, i+1)
                plt.plot(time_vec, vec)
                plt.ylabel(f'{node}')
                plt.grid(True)
            
            plt.xlabel('Time (s)')
            plt.title('{{ project_name }} - Simulation Results')
            plt.tight_layout()
            
            # 保存图片
            plot_file = results_dir / 'simulation_results.png'
            plt.savefig(plot_file, dpi=300, bbox_inches='tight')
            plt.show()
            
            print(f"Simulation completed! Results saved in: {results_dir}")
            print(f"Waveform plot saved in: {plot_file}")
        
    except Exception as e:
        print(f"Error occurred during simulation: {e}")
        raise

if __name__ == "__main__":
    main()
'''
        
        template = Template(python_template)
        
        # 获取主要分析类型
        main_analysis = list(self.config.analyses.keys())[0] if self.config.analyses else 'tran'
        
        return template.render(
            project_name=self.config.project_name,
            simulator=self.config.simulator,
            design_path=self.config.design_path,
            results_dir=self.config.results_dir,
            model_files=self.config.model_files,
            stimulus_files=self.config.stimulus_files,
            design_variables=self.config.design_variables,
            analyses=self.config.analyses,
            save_nodes=self.config.save_nodes,
            initial_conditions=self.config.initial_conditions,
            temperature=self.config.temperature,
            main_analysis=main_analysis
        )


def generate_ocean_script(config: SimulationConfig, output_file: Optional[str] = None) -> str:
    """
    便捷函数：生成Ocean脚本
    
    Args:
        config: 仿真配置对象
        output_file: 输出文件路径，如果为None则不保存文件
        
    Returns:
        生成的脚本内容或保存的文件路径
    """
    generator = OceanScriptGenerator(config)
    
    if output_file:
        return generator.save_script(output_file)
    else:
        return generator.generate_script()


if __name__ == "__main__":
    # 测试脚本生成功能
    from config import SimulationConfig
    
    # 创建测试配置
    test_config = SimulationConfig(
        simulator="spectre",
        design_path="/path/to/design/netlist",
        results_dir="./test_results",
        project_name="test_simulation",
        model_files=[
            ["/path/to/models/design.scs", ""],
            ["/path/to/models/process.scs", "tt"]
        ],
        analyses={
            "tran": {"stop": "1n", "step": "1p"},
            "dc": {"saveOppoint": "t"}
        },
        design_variables={"vdd": 1.8, "temp_coeff": 1e-3},
        save_nodes=["/vout", "/vin", "/vdd"],
        initial_conditions={"/vin": 0.0},
        temperature=27.0
    )
    
    # 生成Ocean脚本
    generator = OceanScriptGenerator(test_config)
    script_content = generator.generate_script()
    print("Generated Ocean script:")
    print("=" * 50)
    print(script_content)
    
    # 生成Python脚本
    print("\n" + "=" * 50)
    print("Generated Python script:")
    print("=" * 50)
    python_script = generator.generate_python_skillbridge_script()
    print(python_script)